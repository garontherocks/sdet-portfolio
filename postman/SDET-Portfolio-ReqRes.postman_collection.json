{
  "info": {
    "name": "SDET Portfolio - ReqRes API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Collection showcasing variables, environments, pre-request scripts, test scripts, and chained requests using the public ReqRes API."
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Login Negative - Missing Password",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Ensure email var is available (fallback if env not set)",
                  "const email = pm.environment.get('email') || 'john@smith';",
                  "pm.variables.set('email', email);",
                  "// Add API key header if provided (ReqRes may require it for POST)",
                  "const apiKey = pm.environment.get('apiKey') || pm.collectionVariables.get('apiKey');",
                  "if (apiKey) { pm.request.headers.add({ key: 'x-api-key', value: apiKey }); }",
                  "// Unique request id for tracing",
                  "pm.variables.set('requestId', Math.random().toString(36).slice(2));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Allow 400 (original) or 401 when API key required",
                  "pm.test('Status is 400 or 401', function () {",
                  "  pm.expect([400,401]).to.include(pm.response.code);",
                  "});",
                  "const json = pm.response.json();",
                  "pm.test('Body error message aligns', function () {",
                  "  if (pm.response.code === 400) {",
                  "    pm.expect(json).to.have.property('error', 'Missing password');",
                  "  } else {",
                  "    pm.expect(json).to.have.property('error', 'Missing API key');",
                  "  }",
                  "});",
                  "pm.test('Content-Type is JSON', function () {",
                  "  pm.response.to.have.header('Content-Type');",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "X-Request-Id", "value": "{{requestId}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\"\n}"
            }
          }
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Default name/job if not provided in env",
                  "pm.variables.set('name', pm.environment.get('name') || 'John');",
                  "pm.variables.set('job', pm.environment.get('job') || 'SDET');",
                  "// Add API key header if provided",
                  "const apiKey = pm.environment.get('apiKey') || pm.collectionVariables.get('apiKey');",
                  "if (apiKey) { pm.request.headers.add({ key: 'x-api-key', value: apiKey }); }"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const code = pm.response.code;",
                  "const json = pm.response.json();",
                  "if (code === 201) {",
                  "  pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "  pm.test('Has id and createdAt', function () {",
                  "    pm.expect(json).to.have.property('id');",
                  "    pm.expect(json).to.have.property('createdAt');",
                  "  });",
                  "  if (json.id) { pm.collectionVariables.set('lastCreatedUserId', String(json.id)); }",
                  "} else {",
                  "  pm.test('401 when API key missing', function () { pm.response.to.have.status(401); });",
                  "  pm.test('Error mentions missing API key', function () { pm.expect(json).to.have.property('error', 'Missing API key'); });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{name}}\",\n  \"job\": \"{{job}}\"\n}"
            }
          }
        },
        {
          "name": "List Users (page=2)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Content-Type JSON', function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                  "pm.test('Data array has users', function () {",
                  "  const json = pm.response.json();",
                  "  pm.expect(json.data).to.be.an('array').with.length.greaterThan(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/users?page=2",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"],
              "query": [{ "key": "page", "value": "2" }]
            }
          }
        },
        {
          "name": "Update User (id=2)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Add API key header if provided",
                  "const apiKey = pm.environment.get('apiKey') || pm.collectionVariables.get('apiKey');",
                  "if (apiKey) { pm.request.headers.add({ key: 'x-api-key', value: apiKey }); }"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const code = pm.response.code;",
                  "const json = pm.response.json();",
                  "if (code === 200) {",
                  "  pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "  pm.test('updatedAt present', function () { pm.expect(json).to.have.property('updatedAt'); });",
                  "} else {",
                  "  pm.test('401 when API key missing', function () { pm.response.to.have.status(401); });",
                  "  pm.test('Error mentions missing API key', function () { pm.expect(json).to.have.property('error', 'Missing API key'); });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/2",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "2"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{name}}\",\n  \"job\": \"Senior {{job}}\"\n}"
            }
          }
        }
      ]
    }
  ],
  "variable": [
    { "key": "baseUrl", "value": "https://reqres.in" }
  ]
}
